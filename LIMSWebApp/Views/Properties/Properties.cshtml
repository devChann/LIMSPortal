@using Microsoft.AspNetCore.Identity;
@using LIMSInfrastructure.Identity;
@using System.Linq;

@model IEnumerable<LIMSWebApp.ViewModels.PropertiesViewModesl.PropertiesViewModel>

@inject UserManager<ApplicationUser> UserManager

@{
    var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.ParcelNum).ToList());
    var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.Rate).ToList());
    ViewData["Title"] = "PropertiesView";
}



	@if (Model.Any())
	{
		<div class="row">
		<div class="col-md-12">
			<h4>My Properties</h4>
			<div class="table-responsive table-sm">
				<table id="properties_table" class="table table-hover table-light">
					<thead class="thead-dark">
						<tr>

							<th>
								@Html.DisplayNameFor(model => model.ParcelNum)
							</th>
							<th>
								@Html.DisplayNameFor(model => model.TenureType)
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Rate)
							</th>
							<th>
								Financial Year
							</th>

							<th>
								Rates Status
							</th>
							<th>
								Actions
							</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var item in Model)
						{
							<tr>

								<td>
									@Html.DisplayFor(modelItem => item.ParcelNum)
								</td>
								<td>
									@Html.DisplayFor(modelItem => item.TenureType)
								</td>
								<td>
									@Html.DisplayFor(modelItem => item.Rate)
								</td>
								<td>
									@DateTime.Now.AddYears(-1).Year/@DateTime.Now.Year
								</td>


								@if (item.Rate > 20000)
								{
									<td>
										<span class="btn btn-sm btn-info"><i class="fa fa-check-circle"></i> Paid</span>
									</td>
									<td>
										<a href="@Url.Action("ParcelDetails", "Parcels", new { parcelnum = item.ParcelNum })" class="btn btn-sm btn-outline-primary">
											<i class="fa fa-info-circle"></i>
											<span>
												<strong>Details</strong>
											</span>
										</a>
										<span class="btn btn-sm btn-outline-info disabled" data-toggle="tooltip" title="All Paid Up"><i class="fa fa-handshake"></i> All Paid Up</span>
									</td>
								}
								else
								{
									<td>
										<span class="btn btn-sm btn-danger"><i class="fa fa-times-circle"></i> Not Paid</span>
									</td>
									<td>
										<a href="@Url.Action("ParcelDetails", "Parcels", new { parcelnum = item.ParcelNum })" class="btn btn-sm btn-outline-primary">
											<i class="fa fa-info-circle"></i>
											<span>
												<strong>Details</strong>
											</span>
										</a>
										<a href="@Url.Action("checkout", "Payments", new { property = item.ParcelNum })" class="btn btn-sm btn-warning">
											<i class="fa fa-money-bill-alt"></i>
											<span>
												<strong>Make Payment</strong>
											</span>
										</a>
										@*<span class="btn btn-sm btn-warning" data-toggle="modal" data-target="#PaymentNotification"><i class="fa fa-money-bill-alt"></i> <strong>Make Payment</strong></span>*@
									</td>
								}


								@*@Html.ActionLink("Details", "ParcelDetails", "Parcels", new { parcelnum = item.ParcelNum }, new { @class = "btn btn-sm btn-outline-info" })*@
								@*@Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })*@
								@*@Html.ActionLink("Rates Payment", "Payments", "Index", new { parcelnum = item.ParcelNum }, new { @class = "btn btn-outline-info" })*@
								@*@Html.ActionLink("New Payment", "", new { @data_toggle = "modal", @data_target = "#PaymentNotification" }, new { @class = "btn btn-outline-info" })*@


							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
		</div>
		<div class="row top10">
			<div class="col-md-12">
				<h4>Property Charts</h4>
			</div>			
		</div>
		<div class="row">
			
			<div class="col-md-6 top10">
				<div class="card">
					<div class="card-body">
						<div class="chart-container">
							<canvas id="pie-chart" style="width:100%; height:250px"></canvas>
						</div>
					</div>
				</div>
			</div>

			<div class="col-md-6 top10">
				<div class="card">
					<div class="card-body">
						<div class="chart-container">
							<canvas id="bar-chart" style="width:100%; height:250px"></canvas>
						</div>
					</div>
				</div>
			</div>
		</div>


		@*Modal dialog*@
		<div class="modal fade" id="PaymentNotification" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
			<div class="modal-dialog modal-dialog-centered" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Payment</h5>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">

						Yopu are about to be redirected to the payment form.

					</div>

					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
						<a class="btn btn-info" asp-controller="Payments" asp-action="Index">Continue</a>
					</div>
				</div>
			</div>
		</div>



	}
	else
	{
		<div class="row">
			<div class="col-md-12">
				<div class="alert alert-warning text-center font-weight-bold">
					<i class="fa fa-info-circle"></i>
					<strong>Sorry, you currently don't own any property in the system.</strong>
				</div>
			</div>
		</div>
	
	}





@section Scripts{
    <script>

        $(document).ready(function () {
            $('#properties_table').DataTable();
        });  

        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        function setRandomColor() {
            var colors = [];
            for (var i = 0; i <= parseInt('@Model.Count()'); i++) {
                colors.push(getRandomColor());
            }

            return colors;
        }

        var color = setRandomColor();

		var piechartName = "pie-chart";
		var barchartName = "bar-chart";

		var piectx = document.getElementById(piechartName).getContext('2d');
		var barctx = document.getElementById(barchartName).getContext('2d');

        var data = {
                labels: @Html.Raw(XLabels),
                datasets: [{
                    //label: "Rates Chart",
                    backgroundColor: color,
                    borderColor: '#FFFFFF',
                    borderWidth: 1,
                    data: @Html.Raw(YValues)
                    }]
                };

        var options = {
            maintainAspectRatio: false,
            scales: { },
            title: {
                display: true,
                text: 'Compare Rates by Property'
            },
			responsive: true,
			legend: {
				display: false
			}
        };

		var mypieChart = new Chart(piectx, {
            options: options,
            data: data,
            type:'pie' //can use doughnut

		});

		var mybarChart = new Chart(barctx, {
			options: options,
			data: data,
			type: 'bar' 

		});

    </script>
}




