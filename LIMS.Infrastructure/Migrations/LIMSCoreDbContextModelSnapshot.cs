// <auto-generated />
using System;
using LIMS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LIMS.Infrastructure.Migrations
{
    [DbContext(typeof(LIMSCoreDbContext))]
    partial class LIMSCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview4.19216.3");

            modelBuilder.Entity("LIMS.Core.Billing.Checkout", b =>
                {
                    b.Property<Guid>("CheckoutId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AmountPaid");

                    b.Property<DateTime>("CheckoutDate");

                    b.Property<string>("CheckoutRequestId");

                    b.Property<Guid>("PaymentId");

                    b.HasKey("CheckoutId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Checkout");
                });

            modelBuilder.Entity("LIMS.Core.Billing.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateDue");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("InvoiceNumber");

                    b.Property<Guid>("ParcelId");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ParcelId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("LIMS.Core.Billing.MpesaTransaction", b =>
                {
                    b.Property<Guid>("MpesaTransactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Amount");

                    b.Property<string>("CheckoutRequestID");

                    b.Property<string>("MerchantRequestId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("ReceiptNumber");

                    b.Property<DateTime>("TransactionDate");

                    b.HasKey("MpesaTransactionId");

                    b.ToTable("MpesaTransaction");
                });

            modelBuilder.Entity("LIMS.Core.Billing.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<Guid>("InvoiceId");

                    b.Property<string>("ModeOfPayment");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<string>("ReceiptNo");

                    b.HasKey("PaymentId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Administration", b =>
                {
                    b.Property<Guid>("AdministrationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlockName");

                    b.Property<string>("DistrictName");

                    b.Property<string>("LocationName");

                    b.HasKey("AdministrationId");

                    b.ToTable("Administration");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Apartment", b =>
                {
                    b.Property<Guid>("ApartmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApartmentName");

                    b.HasKey("ApartmentId");

                    b.ToTable("Apartment");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Beacon", b =>
                {
                    b.Property<Guid>("BeaconId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BeaconNum");

                    b.Property<string>("BeaconType");

                    b.Property<DateTime>("DateSet");

                    b.Property<double>("Hcoordinate");

                    b.Property<string>("HorizontalDatum");

                    b.Property<string>("VerticalDatum");

                    b.Property<double>("Xcoordinate");

                    b.Property<double>("Ycoordinate");

                    b.HasKey("BeaconId");

                    b.ToTable("Beacon");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Boundary", b =>
                {
                    b.Property<Guid>("BoundaryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BoundaryType");

                    b.HasKey("BoundaryId");

                    b.ToTable("Boundary");
                });

            modelBuilder.Entity("LIMS.Core.Entities.BoundaryBeacon", b =>
                {
                    b.Property<Guid>("BoundaryId");

                    b.Property<Guid>("BeaconId");

                    b.HasKey("BoundaryId", "BeaconId");

                    b.HasIndex("BeaconId");

                    b.ToTable("BoundaryBeacon");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Building", b =>
                {
                    b.Property<Guid>("BuildingId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApartmentId");

                    b.Property<Guid>("SpatialUnitId");

                    b.Property<string>("StreetAddress");

                    b.HasKey("BuildingId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("SpatialUnitId");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("LIMS.Core.Entities.BuildingRegulation", b =>
                {
                    b.Property<Guid>("BuildingRegulationId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("GCR");

                    b.Property<double>("PCR");

                    b.Property<double>("PlotFrontage");

                    b.HasKey("BuildingRegulationId");

                    b.ToTable("BuildingRegulation");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Charge", b =>
                {
                    b.Property<Guid>("ChargeId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<double>("InterestRate");

                    b.Property<string>("Lender");

                    b.Property<int>("Ranking");

                    b.Property<int>("RepaymentTerm");

                    b.HasKey("ChargeId");

                    b.ToTable("Charge");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("County");

                    b.Property<string>("GroupType");

                    b.Property<Guid>("OwnerId");

                    b.HasKey("GroupId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("LIMS.Core.Entities.GroupGroupLeadership", b =>
                {
                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("GroupLeadershipId");

                    b.HasKey("GroupId", "GroupLeadershipId");

                    b.HasIndex("GroupLeadershipId");

                    b.ToTable("GroupGroupLeadership");
                });

            modelBuilder.Entity("LIMS.Core.Entities.GroupGroupMembership", b =>
                {
                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("GroupMembershipId");

                    b.HasKey("GroupId", "GroupMembershipId");

                    b.HasIndex("GroupMembershipId");

                    b.ToTable("GroupGroupMembership");
                });

            modelBuilder.Entity("LIMS.Core.Entities.GroupLeadership", b =>
                {
                    b.Property<Guid>("GroupLeadershipId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LeadershipRole");

                    b.Property<DateTime>("LeadershipSince");

                    b.Property<string>("LeadershipStatus");

                    b.Property<DateTime>("LeadershipUntil");

                    b.Property<Guid>("PersonId");

                    b.HasKey("GroupLeadershipId");

                    b.ToTable("GroupLeadership");
                });

            modelBuilder.Entity("LIMS.Core.Entities.GroupMembership", b =>
                {
                    b.Property<Guid>("GroupMembershipId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("MembershipShare");

                    b.Property<DateTime>("MembershipSince");

                    b.Property<string>("MembershipStatus");

                    b.Property<DateTime>("MembershipUntil");

                    b.HasKey("GroupMembershipId");

                    b.ToTable("GroupMembership");
                });

            modelBuilder.Entity("LIMS.Core.Entities.InsitutionLeadership", b =>
                {
                    b.Property<Guid>("InsitutionLeadershipId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("MemberSince");

                    b.Property<DateTime>("MemberUntil");

                    b.Property<string>("MembershipRole");

                    b.Property<string>("MembershipStatus");

                    b.HasKey("InsitutionLeadershipId");

                    b.ToTable("InsitutionLeadership");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Institution", b =>
                {
                    b.Property<Guid>("InstitutionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InstitutionType");

                    b.HasKey("InstitutionId");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("LIMS.Core.Entities.InstitutionInstitutionLeadership", b =>
                {
                    b.Property<Guid>("InstitutionLeadershipId");

                    b.Property<Guid>("InstitutionId");

                    b.HasKey("InstitutionLeadershipId", "InstitutionId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InstitutionInstitutionLeadership");
                });

            modelBuilder.Entity("LIMS.Core.Entities.LandUse", b =>
                {
                    b.Property<Guid>("LandUseId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BuildingRegulationId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("LandUseStatus");

                    b.Property<string>("LandUseType");

                    b.Property<string>("RegulationAgency");

                    b.Property<DateTime?>("StartDate");

                    b.Property<Guid>("ZoneId");

                    b.HasKey("LandUseId");

                    b.HasIndex("BuildingRegulationId");

                    b.HasIndex("ZoneId");

                    b.ToTable("LandUse");
                });

            modelBuilder.Entity("LIMS.Core.Entities.MapIndex", b =>
                {
                    b.Property<Guid>("MapIndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MapSheetNum");

                    b.HasKey("MapIndexId");

                    b.ToTable("MapIndex");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Mortgage", b =>
                {
                    b.Property<Guid>("MortgageId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<double>("InterestRate");

                    b.Property<string>("Lender");

                    b.Property<int>("Ranking");

                    b.Property<int>("RepaymentTerm");

                    b.HasKey("MortgageId");

                    b.ToTable("Mortgage");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Operation", b =>
                {
                    b.Property<Guid>("OperationId");

                    b.Property<string>("OperationName");

                    b.Property<Guid>("ParcelId");

                    b.HasKey("OperationId");

                    b.HasIndex("ParcelId");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Owner", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("OwnerType");

                    b.Property<string>("PIN");

                    b.Property<string>("PostalAddress");

                    b.Property<string>("TelephoneAddress");

                    b.HasKey("OwnerId");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("LIMS.Core.Entities.OwnershipRight", b =>
                {
                    b.Property<Guid>("OwnershipRightId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RightType");

                    b.HasKey("OwnershipRightId");

                    b.ToTable("OwnershipRight");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Parcel", b =>
                {
                    b.Property<Guid>("ParcelId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AdministrationId");

                    b.Property<double?>("Area");

                    b.Property<Guid>("LandUseId");

                    b.Property<Guid>("OwnerId");

                    b.Property<Guid>("OwnershipRightId");

                    b.Property<string>("ParcelNum")
                        .IsRequired();

                    b.Property<Guid>("RateId");

                    b.Property<Guid>("RegistrationId");

                    b.Property<Guid>("ResponsibilityId");

                    b.Property<Guid>("RestrictionId");

                    b.Property<Guid>("SpatialUnitId");

                    b.Property<Guid>("TenureId");

                    b.Property<Guid>("ValuationId");

                    b.HasKey("ParcelId");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("LandUseId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("OwnershipRightId");

                    b.HasIndex("RateId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("ResponsibilityId");

                    b.HasIndex("RestrictionId");

                    b.HasIndex("SpatialUnitId");

                    b.HasIndex("TenureId")
                        .IsUnique();

                    b.HasIndex("ValuationId");

                    b.ToTable("Parcel");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.Property<Guid>("OwnerId");

                    b.Property<string>("PIN");

                    b.Property<string>("PersonType");

                    b.Property<string>("Phone");

                    b.HasKey("PersonId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("LIMS.Core.Entities.PersonGroupLeadership", b =>
                {
                    b.Property<Guid>("GroupLeadershipId");

                    b.Property<Guid>("PersonId");

                    b.HasKey("GroupLeadershipId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonGroupLeadership");
                });

            modelBuilder.Entity("LIMS.Core.Entities.PersonGroupMembership", b =>
                {
                    b.Property<Guid>("GroupMembershipId");

                    b.Property<Guid>("PersonId");

                    b.HasKey("GroupMembershipId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonGroupMembership");
                });

            modelBuilder.Entity("LIMS.Core.Entities.PersonInstitutionLeadership", b =>
                {
                    b.Property<Guid>("InstitutionLeadershipId");

                    b.Property<Guid>("PersonId");

                    b.HasKey("InstitutionLeadershipId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonInstitutionLeadership");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Rate", b =>
                {
                    b.Property<Guid>("RateId");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.HasKey("RateId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Registration", b =>
                {
                    b.Property<Guid>("RegistrationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Jurisdiction");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("RegistrationSection");

                    b.Property<string>("RegistrationType");

                    b.Property<string>("TitleNo");

                    b.HasKey("RegistrationId");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Reserve", b =>
                {
                    b.Property<Guid>("ReserveId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ComplianceStatus");

                    b.Property<string>("EnforcingAuthority");

                    b.Property<string>("ReserveType");

                    b.HasKey("ReserveId");

                    b.ToTable("Reserve");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Responsibility", b =>
                {
                    b.Property<Guid>("ResponsibilityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PerformanceRequirement");

                    b.Property<string>("ResponsibilityType");

                    b.HasKey("ResponsibilityId");

                    b.ToTable("Responsibility");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Restriction", b =>
                {
                    b.Property<Guid>("RestrictionId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChargeId");

                    b.Property<Guid>("MortgageId");

                    b.Property<Guid>("ReserveId");

                    b.Property<string>("RestrictionType");

                    b.Property<Guid>("StatutoryRestrictionId");

                    b.HasKey("RestrictionId");

                    b.HasIndex("ChargeId");

                    b.HasIndex("MortgageId");

                    b.HasIndex("ReserveId");

                    b.HasIndex("StatutoryRestrictionId");

                    b.ToTable("Restriction");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Service", b =>
                {
                    b.Property<Guid>("ServiceId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool>("IsComplete");

                    b.Property<Guid>("OperationId");

                    b.Property<Guid>("Progress");

                    b.HasKey("ServiceId");

                    b.HasIndex("OperationId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("LIMS.Core.Entities.SpatialUnit", b =>
                {
                    b.Property<Guid>("SpatialUnitId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Area");

                    b.Property<Guid>("BoundaryId");

                    b.Property<string>("Label");

                    b.Property<string>("Layer");

                    b.Property<double?>("Length");

                    b.Property<Guid>("MapIndexId");

                    b.Property<int>("PreliminaryUnitId");

                    b.Property<string>("ReferencePoint");

                    b.Property<Guid>("SpatialUnitSetId");

                    b.Property<string>("SpatialUnitType");

                    b.Property<Guid>("SurveyId");

                    b.Property<double?>("Volume");

                    b.HasKey("SpatialUnitId");

                    b.HasIndex("BoundaryId")
                        .IsUnique();

                    b.HasIndex("MapIndexId");

                    b.HasIndex("SpatialUnitSetId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SpatialUnit");
                });

            modelBuilder.Entity("LIMS.Core.Entities.SpatialUnitSet", b =>
                {
                    b.Property<Guid>("SpatialUnitSetId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Label");

                    b.HasKey("SpatialUnitSetId");

                    b.ToTable("SpatialUnitSet");
                });

            modelBuilder.Entity("LIMS.Core.Entities.SpatialUnitSetRegistration", b =>
                {
                    b.Property<Guid>("RegistrationId");

                    b.Property<Guid>("SpatialUnitSetId");

                    b.HasKey("RegistrationId", "SpatialUnitSetId");

                    b.HasIndex("SpatialUnitSetId");

                    b.ToTable("SpatialUnitSetRegistration");
                });

            modelBuilder.Entity("LIMS.Core.Entities.StatutoryRestriction", b =>
                {
                    b.Property<Guid>("StatutoryRestrictionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NatureOfRestriction");

                    b.Property<string>("RestrictingAuthority");

                    b.HasKey("StatutoryRestrictionId");

                    b.ToTable("StatutoryRestriction");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Survey", b =>
                {
                    b.Property<Guid>("SurveyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompsNo");

                    b.Property<DateTime?>("DateOfEntry");

                    b.Property<string>("ParcelNumber");

                    b.Property<int>("PdpRefNo");

                    b.Property<string>("PlansNo");

                    b.Property<string>("SurveyorsName");

                    b.Property<string>("TypeOfSurvey");

                    b.HasKey("SurveyId");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Tenure", b =>
                {
                    b.Property<Guid>("TenureId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Lessor");

                    b.Property<DateTime>("TenureBeginDate");

                    b.Property<DateTime>("TenureEndDate");

                    b.Property<string>("TenureType");

                    b.HasKey("TenureId");

                    b.ToTable("Tenure");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Valuation", b =>
                {
                    b.Property<Guid>("ValuationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Remarks");

                    b.Property<string>("SerialNo");

                    b.Property<string>("ValuationBookNo");

                    b.Property<DateTime?>("ValuationDate");

                    b.Property<double?>("Value");

                    b.Property<string>("Valuer");

                    b.HasKey("ValuationId");

                    b.ToTable("Valuation");
                });

            modelBuilder.Entity("LIMS.Core.Entities.Zone", b =>
                {
                    b.Property<Guid>("ZoneId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ZoneType");

                    b.HasKey("ZoneId");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("LIMS.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("IDNumber");

                    b.Property<string>("KRAPIN");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<byte[]>("Photo");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LIMS.Infrastructure.Identity.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("IPAddress");

                    b.Property<int>("Users");

                    b.HasDiscriminator().HasValue("ApplicationRole");

                    b.HasData(
                        new
                        {
                            Id = "6cf25225-70b9-4f45-ad2f-73bad9cc367d",
                            ConcurrencyStamp = "450fbb5a-2dcd-4889-803c-0f344041d5bb",
                            Name = "Authors",
                            NormalizedName = "AUTHORS",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Users = 0
                        },
                        new
                        {
                            Id = "fc65dd06-cb3a-4539-a334-737cef590fb0",
                            ConcurrencyStamp = "aa0cdc17-7f4a-4b20-9147-7aa41f5a9364",
                            Name = "Editors",
                            NormalizedName = "EDITORS",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Users = 0
                        },
                        new
                        {
                            Id = "d00d9831-075f-4985-9964-6cde9ad642e0",
                            ConcurrencyStamp = "209ebca3-3fa5-4ea6-a85d-4282c9d6a0ef",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Users = 0
                        });
                });

            modelBuilder.Entity("LIMS.Core.Billing.Checkout", b =>
                {
                    b.HasOne("LIMS.Core.Billing.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Billing.Invoice", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Parcel", "Parcel")
                        .WithMany("Invoices")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Billing.Payment", b =>
                {
                    b.HasOne("LIMS.Core.Billing.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.BoundaryBeacon", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Beacon", "Beacon")
                        .WithMany("BoundaryBeacons")
                        .HasForeignKey("BeaconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Boundary", "Boundary")
                        .WithMany("BoundaryBeacons")
                        .HasForeignKey("BoundaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.Building", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Apartment", "Apartment")
                        .WithMany("Building")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.SpatialUnit", "SpatialUnit")
                        .WithMany("Buildings")
                        .HasForeignKey("SpatialUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.Group", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Owner", "Owner")
                        .WithMany("Groups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.GroupGroupLeadership", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.GroupLeadership", "GroupLeadership")
                        .WithMany("GroupGroupLeadership")
                        .HasForeignKey("GroupLeadershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.GroupGroupMembership", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.GroupMembership", "GroupMembership")
                        .WithMany("GroupGroupMemberships")
                        .HasForeignKey("GroupMembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.InstitutionInstitutionLeadership", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Institution", "Institution")
                        .WithMany("InstitutionInstitutionLeadership")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.InsitutionLeadership", "InstitutionLeadership")
                        .WithMany("InstitutionInstitutionLeadership")
                        .HasForeignKey("InstitutionLeadershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.LandUse", b =>
                {
                    b.HasOne("LIMS.Core.Entities.BuildingRegulation", "BuildingRegulation")
                        .WithMany("LandUses")
                        .HasForeignKey("BuildingRegulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Zone", "Zone")
                        .WithMany("LandUses")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.Operation", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Parcel", "Parcel")
                        .WithMany("Operations")
                        .HasForeignKey("ParcelId")
                        .HasConstraintName("FK_Operation_Parcel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.Parcel", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Administration", "Administration")
                        .WithMany("Parcels")
                        .HasForeignKey("AdministrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.LandUse", "LandUse")
                        .WithMany("Parcels")
                        .HasForeignKey("LandUseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Owner", "Owner")
                        .WithMany("Parcels")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.OwnershipRight", "OwnershipRight")
                        .WithMany("Parcels")
                        .HasForeignKey("OwnershipRightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Rate", "Rate")
                        .WithMany("Parcels")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Registration", "Registration")
                        .WithMany("Parcels")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Responsibility", "Responsibility")
                        .WithMany("Parcels")
                        .HasForeignKey("ResponsibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Restriction", "Restriction")
                        .WithMany("Parcels")
                        .HasForeignKey("RestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.SpatialUnit", "SpatialUnit")
                        .WithMany("Parcels")
                        .HasForeignKey("SpatialUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Tenure", "Tenure")
                        .WithOne("Parcel")
                        .HasForeignKey("LIMS.Core.Entities.Parcel", "TenureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Valuation", "Valuation")
                        .WithMany("Parcels")
                        .HasForeignKey("ValuationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.Person", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Owner", "Owner")
                        .WithMany("Persons")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.PersonGroupLeadership", b =>
                {
                    b.HasOne("LIMS.Core.Entities.GroupLeadership", "GroupLeadership")
                        .WithMany("PersonGroupLeaderships")
                        .HasForeignKey("GroupLeadershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Person", "Person")
                        .WithMany("PersonGroupLeaderships")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.PersonGroupMembership", b =>
                {
                    b.HasOne("LIMS.Core.Entities.GroupMembership", "GroupMembership")
                        .WithMany("PersonGroupMemberships")
                        .HasForeignKey("GroupMembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Person", "Person")
                        .WithMany("PersonGroupMemberships")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.PersonInstitutionLeadership", b =>
                {
                    b.HasOne("LIMS.Core.Entities.InsitutionLeadership", "InstitutionLeadership")
                        .WithMany("PersonInstitutionLeaderships")
                        .HasForeignKey("InstitutionLeadershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Person", "Person")
                        .WithMany("PersonInstitutionLeaderships")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.Restriction", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Charge", "Charge")
                        .WithMany("Restrictions")
                        .HasForeignKey("ChargeId")
                        .HasConstraintName("FK_Restriction_Charge")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Mortgage", "Mortgage")
                        .WithMany("Restrictions")
                        .HasForeignKey("MortgageId")
                        .HasConstraintName("FK_Restriction_Mortgage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Reserve", "Reserve")
                        .WithMany("Restrictions")
                        .HasForeignKey("ReserveId")
                        .HasConstraintName("FK_Restriction_Reserve")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.StatutoryRestriction", "StatutoryRestriction")
                        .WithMany("Restrictions")
                        .HasForeignKey("StatutoryRestrictionId")
                        .HasConstraintName("FK_Restriction_StatutoryRestriction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.Service", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Operation", "Operation")
                        .WithMany("Services")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_Service_Operation")
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.SpatialUnit", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Boundary", "Boundary")
                        .WithOne("SpatialUnit")
                        .HasForeignKey("LIMS.Core.Entities.SpatialUnit", "BoundaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.MapIndex", "MapIndex")
                        .WithMany("SpatialUnits")
                        .HasForeignKey("MapIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.SpatialUnitSet", "SpatialUnitSet")
                        .WithMany("SpatialUnits")
                        .HasForeignKey("SpatialUnitSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.Survey", "Survey")
                        .WithMany("SpatialUnits")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LIMS.Core.Entities.SpatialUnitSetRegistration", b =>
                {
                    b.HasOne("LIMS.Core.Entities.Registration", "Registration")
                        .WithMany("SpatialUnitSetRegistrations")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Core.Entities.SpatialUnitSet", "SpatialUnitSet")
                        .WithMany("SpatialUnitSetRegistrations")
                        .HasForeignKey("SpatialUnitSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LIMS.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LIMS.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIMS.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LIMS.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
