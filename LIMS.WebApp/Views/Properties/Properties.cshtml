@using Microsoft.AspNetCore.Identity;
@using LIMS.Infrastructure.Identity;
@using System.Linq;

@model IEnumerable<LIMS.WebApp.ViewModels.PropertiesViewModels.PropertiesViewModel>

@inject UserManager<ApplicationUser> UserManager

@{
    var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.ParcelNum).ToList());
    var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.Rate).ToList());

	var NumberOfInvoices = Model.Select(x => x.Invoices.Count());

    ViewData["Title"] = "PropertiesView";
}

<div class="">
	<ol class="breadcrumb">
		<li class="breadcrumb-item">
			<a asp-controller="Home" asp-action="Index">Home</a>
		</li>
		<li class="breadcrumb-item active">My Properties</li>
	</ol>
</div>

	@if (Model.Any())
	{
		<div class="row">
		<div class="col-md-12">
			
			<div class="row mb-2">
				<div class="col-md-4">
					<div class="card">
						<div class="card-body bg-warning">
							<h3 class="text-black-50">@ViewData["ParcelCount"] Properties</h3>
						</div>
					</div>
				</div>
				<div class="col-md-4">
					<div class="card">
						<div class="card-body bg-secondary">
							<h3 class="text-white-50">@ViewData["InvoiceCount"] Invoices</h3>
						</div>
					</div>
				</div>
				<div class="col-md-4">
					<div class="card">
						<div class="card-body bg-info">
							<h3 class="text-white-50">Ksh @ViewData["InvoiceTotal"] </h3>
						</div>
					</div>
				</div>
			</div>
			<div class="row">
				
				<div class="col-md-12">
					<h4 class="text-muted">My Properties</h4>
					<div class="table-responsive table-sm">
						<table id="properties_table" class="table table-hover table-light">
							<thead class="thead-light">
								<tr>

									<th>
										@Html.DisplayNameFor(model => model.ParcelNum)
									</th>
									<th>
										@Html.DisplayNameFor(model => model.TenureType)
									</th>
									<th>
										@Html.DisplayNameFor(model => model.Rate)
									</th>
									<th>
										Financial Year
									</th>

									<th>
										Actions
									</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var item in Model)
								{
									<tr>

										<td>
											@Html.DisplayFor(modelItem => item.ParcelNum)
										</td>
										<td>
											@Html.DisplayFor(modelItem => item.TenureType)
										</td>
										<td>
											@Html.DisplayFor(modelItem => item.Rate)
										</td>
										<td>
											@DateTime.Now.AddYears(-1).Year/@DateTime.Now.Year
										</td>

										<td>
											<a href="@Url.Action("ParcelDetails", "Land", new { parcelnum = item.ParcelNum })" class="btn btn-sm btn-outline-primary">
												<i class="fa fa-info-circle"></i>
												<span>
													<strong>Details</strong>
												</span>
											</a>
											<a href="@Url.Action("Index", "Invoice", new { parcelnum = item.ParcelNum })" class="btn btn-sm btn-secondary">
												<i class="fa fa-eye"></i>
												<span>
													<strong>View Invoices</strong>
												</span>
											</a>


										</td>

									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>

			</div>
		
		</div>
		</div>
		<div class="row top10">
			<div class="col-md-12">
				<h4 class="text-muted">Insight</h4>
			</div>			
		</div>
		<div class="row">
			
			<div class="col-md-6 top10">
				<div class="card">
					<div class="card-body">
						<div class="chart-container">
							<canvas id="pie-chart" style="width:100%; height:250px"></canvas>
						</div>
					</div>
				</div>
			</div>

			<div class="col-md-6 top10">
				<div class="card">
					<div class="card-body">
						<div class="chart-container">
							<canvas id="bar-chart" style="width:100%; height:250px"></canvas>
						</div>
					</div>
				</div>
			</div>
		</div>


		@*Modal dialog*@
		<div class="modal fade" id="PaymentNotification" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
			<div class="modal-dialog modal-dialog-centered" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Payment</h5>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">

						Yopu are about to be redirected to the payment form.

					</div>

					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
						<a class="btn btn-info" asp-controller="Payments" asp-action="Index">Continue</a>
					</div>
				</div>
			</div>
		</div>



	}
	else
	{
		<div class="row">
			<div class="col-md-12">
				<div class="alert alert-warning text-center font-weight-bold">
					<i class="fa fa-info-circle"></i>
					<strong>Sorry, you currently don't own any property in the system.</strong>
				</div>
			</div>
		</div>
	
	}





@section Scripts{
	<script src="~/lib/chromajs/chroma.min.js"></script>
    <script>

        $(document).ready(function () {
            $('#properties_table').DataTable();
        });  

        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        function setRandomColor() {
            var colors = [];
            for (var i = 0; i <= parseInt('@Model.Count()'); i++) {
                colors.push(getRandomColor());
			}

			var numberOfColors = parseInt('@Model.Count()');

			// we are using chromajs here
			var colors2 = chroma.scale(['teal']).colors(numberOfColors);

			var colors3 = chroma.cubehelix()
				.start(200)
				.rotations(-0.35)
				.gamma(0.7)
				.lightness([0.3, 0.8])
				.scale() // convert to chroma.scale
				.correctLightness()
				.colors(numberOfColors);

			return colors3;
		}

		

        var color = setRandomColor();

		var piechartName = "pie-chart";
		var barchartName = "bar-chart";

		var piectx = document.getElementById(piechartName).getContext('2d');
		var barctx = document.getElementById(barchartName).getContext('2d');

		var data = {
			labels: @Html.Raw(XLabels),
			datasets: [
				{
					//label: "Rates Chart",
					backgroundColor: color,
					borderColor: '#FFFFFF',
					borderWidth: 1,
					data: @Html.Raw(YValues)
                }
			]
        };

        var pieoptions = {
            maintainAspectRatio: false,
            scales: { },
            title: {
                display: true,
                text: 'Rate per Property'
            },
			responsive: true,
			legend: {
				display: false
			}
		};

		var baroptions = {
			maintainAspectRatio: false,
			scales: {
				yAxes: [{
					ticks: {
						beginAtZero: true
					}
				}]
			},
			title: {
				display: true,
				text: 'Rate per Property'
			},
			responsive: true,
			legend: {
				display: false
			}
		};


		var mypieChart = new Chart(piectx, {
			options: pieoptions,
            data: data,
            type:'pie' //can use doughnut

		});

		var mybarChart = new Chart(barctx, {
			options: baroptions,
			data: data,
			type: 'bar' 

		});

    </script>
}




