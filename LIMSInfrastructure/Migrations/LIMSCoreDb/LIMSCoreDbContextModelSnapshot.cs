// <auto-generated />
using System;
using LIMSInfrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LIMSInfrastructure.Migrations.LIMSCoreDb
{
    [DbContext(typeof(LIMSCoreDbContext))]
    partial class LIMSCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview3-35497")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LIMSCore.Billing.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Expires");

                    b.Property<Guid>("ProductId");

                    b.Property<string>("Type");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("LIMSCore.Billing.MpesaTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Amount");

                    b.Property<string>("CheckoutRequestID");

                    b.Property<string>("MerchantRequestId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("ReceiptNumber");

                    b.Property<DateTime>("TransactionDate");

                    b.HasKey("Id");

                    b.ToTable("MpesaTransaction");
                });

            modelBuilder.Entity("LIMSCore.Billing.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<DateTime>("DatePaid");

                    b.Property<Guid>("InvoiceId");

                    b.Property<Guid?>("MpesaTransactionId");

                    b.Property<string>("Type");

                    b.HasKey("PaymentId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MpesaTransactionId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("LIMSCore.Billing.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.Property<double>("Price");

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("LIMSCore.Entities.Administration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlockName");

                    b.Property<string>("DistrictName");

                    b.Property<string>("LocationName");

                    b.HasKey("Id");

                    b.ToTable("Administration");
                });

            modelBuilder.Entity("LIMSCore.Entities.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApartmentName");

                    b.HasKey("Id");

                    b.ToTable("Apartment");
                });

            modelBuilder.Entity("LIMSCore.Entities.Beacon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BeaconNum");

                    b.Property<string>("BeaconType");

                    b.Property<DateTime>("DateSet")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("Hcoordinate");

                    b.Property<string>("HorizontalDatum");

                    b.Property<string>("VerticalDatum");

                    b.Property<double>("Xcoordinate");

                    b.Property<double>("Ycoordinate");

                    b.HasKey("Id");

                    b.ToTable("Beacon");
                });

            modelBuilder.Entity("LIMSCore.Entities.Boundary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoundaryType");

                    b.HasKey("Id");

                    b.ToTable("Boundary");
                });

            modelBuilder.Entity("LIMSCore.Entities.BoundaryBeacon", b =>
                {
                    b.Property<int>("BoundaryId");

                    b.Property<int>("BeaconId");

                    b.HasKey("BoundaryId", "BeaconId");

                    b.HasIndex("BeaconId");

                    b.ToTable("BoundaryBeacon");
                });

            modelBuilder.Entity("LIMSCore.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentId");

                    b.Property<int>("SpatialUnitId");

                    b.Property<string>("StreetAddress");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("SpatialUnitId");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("LIMSCore.Entities.BuildingRegulations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Gcr")
                        .HasColumnName("GCR");

                    b.Property<double>("Pcr")
                        .HasColumnName("PCR");

                    b.Property<double>("PlotFrontage");

                    b.HasKey("Id");

                    b.ToTable("BuildingRegulations");
                });

            modelBuilder.Entity("LIMSCore.Entities.Charge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<double>("InterestRate");

                    b.Property<string>("Lender")
                        .HasColumnName("lender");

                    b.Property<int>("Ranking");

                    b.Property<int>("RepaymentTerm");

                    b.HasKey("Id");

                    b.ToTable("Charge");
                });

            modelBuilder.Entity("LIMSCore.Entities.Freehold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TenureId");

                    b.HasKey("Id");

                    b.HasIndex("TenureId")
                        .IsUnique();

                    b.ToTable("Freehold");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupGroupLeadership", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("GroupLeadershipId");

                    b.HasKey("GroupId", "GroupLeadershipId");

                    b.HasIndex("GroupLeadershipId");

                    b.ToTable("GroupGroupLeadership");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupGroupMembership", b =>
                {
                    b.Property<int>("GroupMembershipId");

                    b.Property<int>("GroupId");

                    b.HasKey("GroupMembershipId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupGroupMembership");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupLeadership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LeadershipRole");

                    b.Property<DateTime>("LeadershipSince")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LeadershipStatus");

                    b.Property<DateTime>("LeadershipUntil")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonID");

                    b.HasKey("Id");

                    b.ToTable("GroupLeadership");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupLeadershipPerson", b =>
                {
                    b.Property<int>("GroupLeadershipId");

                    b.Property<int>("PersonId");

                    b.HasKey("GroupLeadershipId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("GroupLeadershipPerson");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("MembershipShare");

                    b.Property<DateTime>("MembershipSince")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MembershipStatus");

                    b.Property<DateTime>("MembershipUntil")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("GroupMembership");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupOw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("County");

                    b.Property<string>("GroupType");

                    b.Property<int>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("GroupOW");
                });

            modelBuilder.Entity("LIMSCore.Entities.InsitutionLeadership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("MemberSince")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("MemberUntil")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MembershipRole");

                    b.Property<string>("MembershipStatus");

                    b.HasKey("Id");

                    b.ToTable("InsitutionLeadership");
                });

            modelBuilder.Entity("LIMSCore.Entities.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InstitutionType");

                    b.HasKey("Id");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("LIMSCore.Entities.InstitutionInstitutionLeadership", b =>
                {
                    b.Property<int>("InstitutionLeadershipId");

                    b.Property<int>("InstitutionId");

                    b.HasKey("InstitutionLeadershipId", "InstitutionId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InstitutionInstitutionLeadership");
                });

            modelBuilder.Entity("LIMSCore.Entities.InstitutionLeadershipPerson", b =>
                {
                    b.Property<int>("InstitutionLeadershipId");

                    b.Property<int>("PersonId");

                    b.HasKey("InstitutionLeadershipId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("InstitutionLeadershipPerson");
                });

            modelBuilder.Entity("LIMSCore.Entities.LandUse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingRegulationsId");

                    b.Property<DateTime?>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LandUseStatus");

                    b.Property<string>("LandUseType");

                    b.Property<string>("RegulationAgency");

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ZoneId");

                    b.HasKey("Id");

                    b.HasIndex("BuildingRegulationsId");

                    b.HasIndex("ZoneId");

                    b.ToTable("LandUse");
                });

            modelBuilder.Entity("LIMSCore.Entities.Leasehold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LeasePeriod")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Lessor");

                    b.Property<int>("TenureId");

                    b.HasKey("Id");

                    b.HasIndex("TenureId");

                    b.ToTable("Leasehold");
                });

            modelBuilder.Entity("LIMSCore.Entities.MapIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MapSheetNum");

                    b.Property<int>("ParcelId");

                    b.HasKey("Id");

                    b.ToTable("MapIndex");
                });

            modelBuilder.Entity("LIMSCore.Entities.Mortgage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<string>("BuildingId");

                    b.Property<double>("InterestRate");

                    b.Property<string>("Lender");

                    b.Property<int>("Ranking");

                    b.Property<int>("RepaymentTerm");

                    b.HasKey("Id");

                    b.ToTable("Mortgage");
                });

            modelBuilder.Entity("LIMSCore.Entities.Operation", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<int?>("Parcelid");

                    b.HasKey("Id");

                    b.HasIndex("Parcelid");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("LIMSCore.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("OwnerType");

                    b.Property<string>("PIN")
                        .HasColumnName("PIN");

                    b.Property<string>("PostalAddress");

                    b.Property<string>("TelephoneAddress");

                    b.HasKey("Id");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("LIMSCore.Entities.OwnershipRights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RightType");

                    b.HasKey("Id");

                    b.ToTable("OwnershiRights");
                });

            modelBuilder.Entity("LIMSCore.Entities.Parcel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Administrationid");

                    b.Property<double?>("Area");

                    b.Property<int>("LandUseId");

                    b.Property<int>("OwnerId");

                    b.Property<int>("OwnershipRights");

                    b.Property<string>("ParcelNum")
                        .IsRequired();

                    b.Property<int?>("RateId");

                    b.Property<int>("RegistrationId");

                    b.Property<int>("Responsibilities");

                    b.Property<int>("Restrictions");

                    b.Property<int>("SpatialUnitId");

                    b.Property<int>("TenureId");

                    b.Property<int>("ValuationId");

                    b.HasKey("Id");

                    b.HasIndex("Administrationid");

                    b.HasIndex("LandUseId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("OwnershipRights");

                    b.HasIndex("RateId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("Responsibilities");

                    b.HasIndex("Restrictions");

                    b.HasIndex("SpatialUnitId");

                    b.HasIndex("TenureId");

                    b.HasIndex("ValuationId");

                    b.ToTable("Parcel");
                });

            modelBuilder.Entity("LIMSCore.Entities.Payments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("ModeOfPayment")
                        .HasMaxLength(10);

                    b.Property<int?>("ParcelId");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReceiptNo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParcelId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("LIMSCore.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.Property<int>("OwnerId");

                    b.Property<string>("PersonType");

                    b.Property<string>("Phone");

                    b.Property<string>("Pin")
                        .HasColumnName("PIN");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("LIMSCore.Entities.PersonGroupMembership", b =>
                {
                    b.Property<int>("GroupMembershipId");

                    b.Property<int>("PersonId");

                    b.HasKey("GroupMembershipId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonGroupMembership");
                });

            modelBuilder.Entity("LIMSCore.Entities.Rates", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("LIMSCore.Entities.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Jurisdiction");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RegistrationSection");

                    b.Property<string>("RegistrationType");

                    b.Property<string>("TitleNo");

                    b.HasKey("Id");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("LIMSCore.Entities.Reserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComplianceStatus");

                    b.Property<string>("EnforcingAuthority");

                    b.Property<string>("ReserveType");

                    b.HasKey("Id");

                    b.ToTable("Reserve");
                });

            modelBuilder.Entity("LIMSCore.Entities.Responsibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PerformanceRequirement");

                    b.Property<string>("ResponsibilityType");

                    b.HasKey("Id");

                    b.ToTable("Responsibility");
                });

            modelBuilder.Entity("LIMSCore.Entities.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChrageId")
                        .HasColumnName("chrageId");

                    b.Property<int?>("LandUseId")
                        .HasColumnName("landUseId");

                    b.Property<int?>("Morgageid")
                        .HasColumnName("morgageid");

                    b.Property<int?>("ReserveId")
                        .HasColumnName("ReserveID");

                    b.Property<string>("RestrictionType");

                    b.Property<int?>("Statutoryid");

                    b.HasKey("Id");

                    b.HasIndex("ChrageId");

                    b.HasIndex("Morgageid");

                    b.HasIndex("ReserveId");

                    b.HasIndex("Statutoryid");

                    b.ToTable("Restriction");
                });

            modelBuilder.Entity("LIMSCore.Entities.Service", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsComplete");

                    b.Property<int>("Opid")
                        .HasColumnName("OPid");

                    b.Property<int?>("Progress");

                    b.HasKey("Id");

                    b.HasIndex("Opid");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("LIMSCore.Entities.SpatialUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Area");

                    b.Property<int>("BoundaryId");

                    b.Property<string>("Label");

                    b.Property<string>("Layer");

                    b.Property<double?>("Length");

                    b.Property<int>("MapIndexId");

                    b.Property<int>("PreliminaryUnitId");

                    b.Property<string>("ReferencePoint");

                    b.Property<int>("SpatialUnitSetId");

                    b.Property<string>("SpatialUnitType");

                    b.Property<int>("SurveyClassId");

                    b.Property<double?>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("BoundaryId")
                        .IsUnique();

                    b.HasIndex("MapIndexId");

                    b.HasIndex("SpatialUnitSetId");

                    b.HasIndex("SurveyClassId");

                    b.ToTable("SpatialUnit");
                });

            modelBuilder.Entity("LIMSCore.Entities.SpatialUnitSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label");

                    b.HasKey("Id");

                    b.ToTable("SpatialUnitSet");
                });

            modelBuilder.Entity("LIMSCore.Entities.SpatialUnitSetRegistration", b =>
                {
                    b.Property<int>("RegistrationId");

                    b.Property<int>("SpatialUnitSetId");

                    b.HasKey("RegistrationId", "SpatialUnitSetId");

                    b.HasIndex("SpatialUnitSetId");

                    b.ToTable("SpatialUnitSetRegistration");
                });

            modelBuilder.Entity("LIMSCore.Entities.StaturtoryRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NatureOfRestriction");

                    b.Property<string>("RestrictingAuthority");

                    b.HasKey("Id");

                    b.ToTable("StaturtoryRestriction");
                });

            modelBuilder.Entity("LIMSCore.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompsNo");

                    b.Property<DateTime?>("DateOfEntry")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ParcelId");

                    b.Property<int>("PdprefNo")
                        .HasColumnName("PDPRefNo");

                    b.Property<string>("PlansNo");

                    b.Property<string>("SurveyorsName");

                    b.Property<string>("TypeOfSurvey");

                    b.HasKey("Id");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("LIMSCore.Entities.Tenure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TenureType");

                    b.HasKey("Id");

                    b.ToTable("Tenure");
                });

            modelBuilder.Entity("LIMSCore.Entities.Valution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Remarks");

                    b.Property<string>("SerialNo");

                    b.Property<string>("ValuationBookNo");

                    b.Property<DateTime?>("ValuationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("Value");

                    b.Property<string>("Valuer");

                    b.HasKey("Id");

                    b.ToTable("Valution");
                });

            modelBuilder.Entity("LIMSCore.Entities.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RegulationId");

                    b.Property<string>("ZoneType");

                    b.HasKey("Id");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("LIMSInfrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("IDNumber");

                    b.Property<string>("KRAPIN");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<byte[]>("Photo");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LIMSInfrastructure.Identity.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("IPAddress");

                    b.Property<int>("Users");

                    b.HasDiscriminator().HasValue("ApplicationRole");

                    b.HasData(
                        new
                        {
                            Id = "2b37b32d-26a9-4aa5-a869-7de6db6f4e23",
                            ConcurrencyStamp = "f9223225-3c28-42cf-812c-da5f0caffdc4",
                            Name = "Authors",
                            NormalizedName = "AUTHORS",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Users = 0
                        },
                        new
                        {
                            Id = "3acc021c-6073-45ee-a32a-5b368e777cec",
                            ConcurrencyStamp = "29374409-38c9-4ba6-ba55-ef8061ae363b",
                            Name = "Editors",
                            NormalizedName = "EDITORS",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Users = 0
                        },
                        new
                        {
                            Id = "c6252fb0-3b13-42fb-8d4a-d3d35a21d631",
                            ConcurrencyStamp = "3db2c288-7dca-4c06-b02c-dd5e75b7686d",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Users = 0
                        });
                });

            modelBuilder.Entity("LIMSCore.Billing.Invoice", b =>
                {
                    b.HasOne("LIMSCore.Billing.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Billing.Payment", b =>
                {
                    b.HasOne("LIMSCore.Billing.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Billing.MpesaTransaction", "MpesaTransaction")
                        .WithMany()
                        .HasForeignKey("MpesaTransactionId");
                });

            modelBuilder.Entity("LIMSCore.Entities.BoundaryBeacon", b =>
                {
                    b.HasOne("LIMSCore.Entities.Beacon", "Beacon")
                        .WithMany("BoundaryBeacon")
                        .HasForeignKey("BeaconId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Boundary", "Boundary")
                        .WithMany("BoundaryBeacon")
                        .HasForeignKey("BoundaryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Building", b =>
                {
                    b.HasOne("LIMSCore.Entities.Apartment", "Apartment")
                        .WithMany("Building")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.SpatialUnit", "SpatialUnit")
                        .WithMany("Building")
                        .HasForeignKey("SpatialUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Freehold", b =>
                {
                    b.HasOne("LIMSCore.Entities.Tenure", "Tenure")
                        .WithOne("Freehold")
                        .HasForeignKey("LIMSCore.Entities.Freehold", "TenureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupGroupLeadership", b =>
                {
                    b.HasOne("LIMSCore.Entities.GroupLeadership", "GroupLeadership")
                        .WithMany("GroupGroupLeadership")
                        .HasForeignKey("GroupLeadershipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupGroupMembership", b =>
                {
                    b.HasOne("LIMSCore.Entities.GroupMembership", "GroupMembership")
                        .WithMany("GroupGroupMembership")
                        .HasForeignKey("GroupMembershipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupLeadershipPerson", b =>
                {
                    b.HasOne("LIMSCore.Entities.GroupLeadership", "GroupLeadership")
                        .WithMany("GroupLeadershipPerson")
                        .HasForeignKey("GroupLeadershipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Person", "Person")
                        .WithMany("GroupLeadershipPerson")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupOw", b =>
                {
                    b.HasOne("LIMSCore.Entities.Owner", "Owner")
                        .WithMany("GroupOw")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.InstitutionInstitutionLeadership", b =>
                {
                    b.HasOne("LIMSCore.Entities.Institution", "Institution")
                        .WithMany("InstitutionInstitutionLeadership")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.InsitutionLeadership", "InstitutionLeadership")
                        .WithMany("InstitutionInstitutionLeadership")
                        .HasForeignKey("InstitutionLeadershipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.InstitutionLeadershipPerson", b =>
                {
                    b.HasOne("LIMSCore.Entities.InsitutionLeadership", "InstitutionLeadership")
                        .WithMany("InstitutionLeadershipPerson")
                        .HasForeignKey("InstitutionLeadershipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Person", "Person")
                        .WithMany("InstitutionLeadershipPerson")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.LandUse", b =>
                {
                    b.HasOne("LIMSCore.Entities.BuildingRegulations", "BuildingRegulations")
                        .WithMany("LandUse")
                        .HasForeignKey("BuildingRegulationsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Zone", "Zone")
                        .WithMany("LandUse")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Leasehold", b =>
                {
                    b.HasOne("LIMSCore.Entities.Tenure", "Tenure")
                        .WithMany("Leasehold")
                        .HasForeignKey("TenureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Operation", b =>
                {
                    b.HasOne("LIMSCore.Entities.Parcel", "Parcel")
                        .WithMany("Operation")
                        .HasForeignKey("Parcelid")
                        .HasConstraintName("FK_Operation_Parcel")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Parcel", b =>
                {
                    b.HasOne("LIMSCore.Entities.Administration", "Administration")
                        .WithMany("Parcel")
                        .HasForeignKey("Administrationid")
                        .HasConstraintName("FK_Parcel_Administration")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.LandUse", "LandUse")
                        .WithMany("Parcel")
                        .HasForeignKey("LandUseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Owner", "Owner")
                        .WithMany("Parcel")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Parcel_Owners")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.OwnershipRights", "OwnershipRightsNavigation")
                        .WithMany("Parcel")
                        .HasForeignKey("OwnershipRights")
                        .HasConstraintName("FK_Parcel_OwnershiRights")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Rates", "Rate")
                        .WithMany("Parcel")
                        .HasForeignKey("RateId")
                        .HasConstraintName("FK_Parcel_Rates");

                    b.HasOne("LIMSCore.Entities.Registration", "Registration")
                        .WithMany("Parcel")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Responsibility", "ResponsibilitiesNavigation")
                        .WithMany("Parcel")
                        .HasForeignKey("Responsibilities")
                        .HasConstraintName("FK_Parcel_Responsibility")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Restriction", "RestrictionsNavigation")
                        .WithMany("Parcel")
                        .HasForeignKey("Restrictions")
                        .HasConstraintName("FK_Parcel_Restriction")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.SpatialUnit", "SpatialUnit")
                        .WithMany("Parcel")
                        .HasForeignKey("SpatialUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Tenure", "Tenure")
                        .WithMany("Parcel")
                        .HasForeignKey("TenureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Valution", "Valuation")
                        .WithMany("Parcel")
                        .HasForeignKey("ValuationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Payments", b =>
                {
                    b.HasOne("LIMSCore.Entities.Parcel", "Parcel")
                        .WithMany("Payments")
                        .HasForeignKey("ParcelId")
                        .HasConstraintName("FK_Payments_Parcel");
                });

            modelBuilder.Entity("LIMSCore.Entities.Person", b =>
                {
                    b.HasOne("LIMSCore.Entities.Owner", "Owner")
                        .WithMany("Person")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.PersonGroupMembership", b =>
                {
                    b.HasOne("LIMSCore.Entities.GroupMembership", "GroupMembership")
                        .WithMany("PersonGroupMembership")
                        .HasForeignKey("GroupMembershipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Person", "Person")
                        .WithMany("PersonGroupMembership")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Restriction", b =>
                {
                    b.HasOne("LIMSCore.Entities.Charge", "Chrage")
                        .WithMany("Restriction")
                        .HasForeignKey("ChrageId")
                        .HasConstraintName("FK_Restriction_Charge");

                    b.HasOne("LIMSCore.Entities.Mortgage", "Morgage")
                        .WithMany("Restriction")
                        .HasForeignKey("Morgageid")
                        .HasConstraintName("FK_Restriction_Mortgage");

                    b.HasOne("LIMSCore.Entities.Reserve", "Reserve")
                        .WithMany("Restriction")
                        .HasForeignKey("ReserveId")
                        .HasConstraintName("FK_Restriction_Reserve");

                    b.HasOne("LIMSCore.Entities.StaturtoryRestriction", "Statutory")
                        .WithMany("Restriction")
                        .HasForeignKey("Statutoryid")
                        .HasConstraintName("FK_Restriction_StaturtoryRestriction");
                });

            modelBuilder.Entity("LIMSCore.Entities.Service", b =>
                {
                    b.HasOne("LIMSCore.Entities.Operation", "Op")
                        .WithMany("Service")
                        .HasForeignKey("Opid")
                        .HasConstraintName("FK_Service_Operation");
                });

            modelBuilder.Entity("LIMSCore.Entities.SpatialUnit", b =>
                {
                    b.HasOne("LIMSCore.Entities.Boundary", "Boundary")
                        .WithOne("SpatialUnit")
                        .HasForeignKey("LIMSCore.Entities.SpatialUnit", "BoundaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.MapIndex", "MapIndex")
                        .WithMany("SpatialUnit")
                        .HasForeignKey("MapIndexId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.SpatialUnitSet", "SpatialUnitSet")
                        .WithMany("SpatialUnit")
                        .HasForeignKey("SpatialUnitSetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Survey", "SurveyClass")
                        .WithMany("SpatialUnit")
                        .HasForeignKey("SurveyClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.SpatialUnitSetRegistration", b =>
                {
                    b.HasOne("LIMSCore.Entities.Registration", "Registration")
                        .WithMany("SpatialUnitSetRegistration")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.SpatialUnitSet", "SpatialUnitSet")
                        .WithMany("SpatialUnitSetRegistration")
                        .HasForeignKey("SpatialUnitSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LIMSInfrastructure.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LIMSInfrastructure.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSInfrastructure.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LIMSInfrastructure.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
