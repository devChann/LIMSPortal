// <auto-generated />
using LIMSInfrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace LIMSInfrastructure.Migrations
{
    [DbContext(typeof(LIMSDbContext))]
    [Migration("20171127062447_Initial Migration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("Relational:Sequence:.administration_hilo", "'administration_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.apartment_hilo", "'apartment_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.beacon_hilo", "'beacon_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.boundary_hilo", "'boundary_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.building_hilo", "'building_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.building_regulations_hilo", "'building_regulations_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.charge_hilo", "'charge_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.freehold_hilo", "'freehold_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.group_hilo", "'group_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.group_leadership_hilo", "'group_leadership_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.group_membership_hilo", "'group_membership_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.instituion_hilo", "'instituion_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.institution_leadership_hilo", "'institution_leadership_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.landuse_hilo", "'landuse_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.leasehold_hilo", "'leasehold_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.mortgage_hilo", "'mortgage_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.mpa_index_hilo", "'mpa_index_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.owner_hilo", "'owner_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.parcel_hilo", "'parcel_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.person_hilo", "'person_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.registration_hilo", "'registration_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.reserve_hilo", "'reserve_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.responsibility_hilo", "'responsibility_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.restriction_hilo", "'restriction_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.right_hilo", "'right_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.rrr_hilo", "'rrr_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.spatial_unit_hilo", "'spatial_unit_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.spatialunitset_hilo", "'spatialunitset_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.statutory_restriction_hilo", "'statutory_restriction_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.survey_hilo", "'survey_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.tenure_hilo", "'tenure_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.valuation_hilo", "'valuation_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.zone_hilo", "'zone_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LIMSCore.Entities.Administration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "administration_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("AdminID")
                        .HasMaxLength(100);

                    b.Property<string>("BlockName");

                    b.Property<string>("DistrictName");

                    b.Property<string>("LocationName");

                    b.Property<int?>("ParcelId");

                    b.HasKey("Id");

                    b.HasAlternateKey("AdminID");

                    b.HasIndex("ParcelId")
                        .IsUnique()
                        .HasFilter("[ParcelId] IS NOT NULL");

                    b.ToTable("Administration");
                });

            modelBuilder.Entity("LIMSCore.Entities.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "apartment_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("BuildingID")
                        .HasMaxLength(100);

                    b.Property<int>("UnitID");

                    b.HasKey("Id");

                    b.HasAlternateKey("UnitID");

                    b.ToTable("Apartment");
                });

            modelBuilder.Entity("LIMSCore.Entities.Beacon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "beacon_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("BeaconID")
                        .HasMaxLength(100);

                    b.Property<string>("BeaconType");

                    b.Property<DateTime>("DateSet");

                    b.Property<double>("Hcoordinate");

                    b.Property<string>("HorizontalDatum");

                    b.Property<string>("VerticalDatum");

                    b.Property<double>("Xcoordinate");

                    b.Property<double>("Ycoordinate");

                    b.HasKey("Id");

                    b.ToTable("Beacon");
                });

            modelBuilder.Entity("LIMSCore.Entities.Boundary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "boundary_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("BoundaryID")
                        .HasMaxLength(100);

                    b.Property<int>("BoundaryType");

                    b.HasKey("Id");

                    b.ToTable("Boundary");
                });

            modelBuilder.Entity("LIMSCore.Entities.BoundaryBeacon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BeaconID");

                    b.Property<int>("BoundaryID");

                    b.HasKey("Id");

                    b.HasIndex("BeaconID");

                    b.HasIndex("BoundaryID");

                    b.ToTable("BoundaryBeacon");
                });

            modelBuilder.Entity("LIMSCore.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "building_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("BuildingID")
                        .HasMaxLength(100);

                    b.Property<int>("SpatialUnitID");

                    b.Property<string>("StreetAddress");

                    b.Property<int>("UnitID");

                    b.HasKey("Id");

                    b.HasAlternateKey("BuildingID");

                    b.HasIndex("SpatialUnitID");

                    b.HasIndex("UnitID");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("LIMSCore.Entities.BuildingRegulations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "building_regulations_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<double>("GCR");

                    b.Property<double>("PCR");

                    b.Property<double>("PlotFrontage");

                    b.Property<int>("RegulatedID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("RegulatedID");

                    b.ToTable("BuildingRegulations");
                });

            modelBuilder.Entity("LIMSCore.Entities.Charge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "charge_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<double>("Amount")
                        .HasMaxLength(100);

                    b.Property<int>("ChargeID");

                    b.Property<double>("InterestRate");

                    b.Property<int>("Ranking");

                    b.Property<int>("RepaymentTerm");

                    b.Property<int?>("RestrictionId");

                    b.Property<string>("lender");

                    b.HasKey("Id");

                    b.HasIndex("RestrictionId");

                    b.ToTable("Charge");
                });

            modelBuilder.Entity("LIMSCore.Entities.Freehold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "freehold_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("TenureID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("TenureID");

                    b.ToTable("Freehold");
                });

            modelBuilder.Entity("LIMSCore.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "group_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("County");

                    b.Property<int>("GroupID")
                        .HasMaxLength(100);

                    b.Property<string>("GroupType");

                    b.Property<int>("LeadershipID");

                    b.Property<int?>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupGroupLeadership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GroupID");

                    b.Property<int?>("GroupLeadershipId");

                    b.Property<int>("LeadershipID");

                    b.HasKey("Id");

                    b.HasIndex("GroupID");

                    b.HasIndex("GroupLeadershipId");

                    b.ToTable("GroupGroupLeadership");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupGroupMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GroupID");

                    b.Property<int?>("GroupMembershipId");

                    b.Property<int>("MembershipID");

                    b.HasKey("Id");

                    b.HasIndex("GroupID");

                    b.HasIndex("GroupMembershipId");

                    b.ToTable("GroupGroupMembership");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupLeadership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "group_leadership_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("GroupID")
                        .HasMaxLength(100);

                    b.Property<int>("LeadershipID");

                    b.Property<string>("LeadershipRole");

                    b.Property<DateTime>("LeadershipSince");

                    b.Property<int>("LeadershipStatus");

                    b.Property<DateTime>("LeadershipUntil");

                    b.Property<int>("PersonID");

                    b.HasKey("Id");

                    b.ToTable("GroupLeadership");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupLeadershipPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GroupLeadershipId");

                    b.Property<int>("LeadershipID");

                    b.Property<int>("PersonID");

                    b.HasKey("Id");

                    b.HasIndex("GroupLeadershipId");

                    b.HasIndex("PersonID");

                    b.ToTable("GroupLeadershipPerson");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "group_membership_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("GroupID");

                    b.Property<double>("MembershipShare");

                    b.Property<DateTime>("MembershipSince");

                    b.Property<int>("MembershipStatus");

                    b.Property<DateTime>("MembershipUntil");

                    b.Property<int>("MemershipID")
                        .HasMaxLength(100);

                    b.Property<int>("PersonID");

                    b.HasKey("Id");

                    b.ToTable("GroupMembership");
                });

            modelBuilder.Entity("LIMSCore.Entities.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "instituion_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("InstituionID")
                        .HasMaxLength(100);

                    b.Property<string>("InstitutionType");

                    b.Property<int?>("OwnerId");

                    b.HasKey("Id");

                    b.HasAlternateKey("InstituionID");

                    b.HasIndex("OwnerId");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("LIMSCore.Entities.InstitutionInstitutionLeadership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InstitutionID");

                    b.Property<int?>("InstitutionLeadershipId");

                    b.Property<int>("MembershipID");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionID");

                    b.HasIndex("InstitutionLeadershipId");

                    b.ToTable("InstitutionInstitutionLeadership");
                });

            modelBuilder.Entity("LIMSCore.Entities.InstitutionLeadership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "institution_leadership_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("InstitutionID")
                        .HasMaxLength(100);

                    b.Property<DateTime>("MemberSince");

                    b.Property<DateTime>("MemberUntil");

                    b.Property<int>("MembershipID");

                    b.Property<string>("MembershipRole");

                    b.Property<int>("MembershipStatus");

                    b.Property<int>("PersonID");

                    b.HasKey("Id");

                    b.HasAlternateKey("MembershipID");

                    b.ToTable("InsitutionLeadership");
                });

            modelBuilder.Entity("LIMSCore.Entities.InstitutionLeadershipPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("InstitutionLeadershipId");

                    b.Property<int>("MembershipID");

                    b.Property<int>("PersonID");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionLeadershipId");

                    b.HasIndex("PersonID");

                    b.ToTable("InstitutionLeadershipPerson");
                });

            modelBuilder.Entity("LIMSCore.Entities.LandUse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "landuse_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("LandUseID")
                        .HasMaxLength(100);

                    b.Property<string>("LandUseStatus");

                    b.Property<string>("LandUseType")
                        .HasMaxLength(50);

                    b.Property<int>("RegulatedID");

                    b.Property<string>("RegulationAgency");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("ZoningID");

                    b.HasKey("Id");

                    b.HasIndex("RegulatedID");

                    b.HasIndex("ZoningID");

                    b.ToTable("LandUse");
                });

            modelBuilder.Entity("LIMSCore.Entities.Leasehold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "leasehold_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("LeasePeriod");

                    b.Property<string>("Lessor");

                    b.Property<int>("TenureID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("TenureID");

                    b.ToTable("Leasehold");
                });

            modelBuilder.Entity("LIMSCore.Entities.MapIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "mpa_index_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("MapSheetNo");

                    b.Property<int>("ParcelID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("MapSheetNo");

                    b.ToTable("MapIndex");
                });

            modelBuilder.Entity("LIMSCore.Entities.Mortgage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "mortgage_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<double>("Amount");

                    b.Property<string>("BuildingID");

                    b.Property<double>("InterestRate");

                    b.Property<string>("Lender");

                    b.Property<int>("MortgageID")
                        .HasMaxLength(100);

                    b.Property<int>("Ranking");

                    b.Property<int>("RepaymentTerm");

                    b.Property<int?>("RestrictionId");

                    b.HasKey("Id");

                    b.HasAlternateKey("MortgageID");

                    b.HasIndex("RestrictionId");

                    b.ToTable("Mortgage");
                });

            modelBuilder.Entity("LIMSCore.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "owner_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name");

                    b.Property<int>("OwnerID")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerType");

                    b.Property<string>("PostalAddress");

                    b.Property<string>("ReferenceType");

                    b.Property<string>("TelephoneAddress");

                    b.Property<int>("Uniquereference");

                    b.HasKey("Id");

                    b.HasAlternateKey("OwnerID");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("LIMSCore.Entities.OwnerRRR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OwnerID");

                    b.Property<int>("RRRID");

                    b.HasKey("Id");

                    b.HasIndex("OwnerID");

                    b.HasIndex("RRRID");

                    b.ToTable("OwnerRRR");
                });

            modelBuilder.Entity("LIMSCore.Entities.Parcel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "parcel_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<double?>("Area");

                    b.Property<int>("LandUseID");

                    b.Property<int>("ParcelID")
                        .HasMaxLength(100);

                    b.Property<int>("RegistrationID");

                    b.Property<int>("SpatialUnitID");

                    b.Property<int>("TenureID");

                    b.HasKey("Id");

                    b.HasIndex("LandUseID");

                    b.HasIndex("RegistrationID");

                    b.HasIndex("SpatialUnitID");

                    b.HasIndex("TenureID");

                    b.ToTable("Parcel");
                });

            modelBuilder.Entity("LIMSCore.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "person_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.Property<int?>("OwnerId");

                    b.Property<string>("PIN");

                    b.Property<int>("PersonID")
                        .HasMaxLength(100);

                    b.Property<string>("PersonType");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("LIMSCore.Entities.PersonGroupMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GroupMembershipId");

                    b.Property<int>("MembershipID");

                    b.Property<int>("PersonID");

                    b.HasKey("Id");

                    b.HasIndex("GroupMembershipId");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonGroupMembership");
                });

            modelBuilder.Entity("LIMSCore.Entities.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "registration_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Jurisdiction");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<int>("RegistrationID")
                        .HasMaxLength(100);

                    b.Property<string>("RegistrationSection");

                    b.Property<string>("RegistrationType");

                    b.Property<string>("TitleNo");

                    b.HasKey("Id");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("LIMSCore.Entities.Reserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "reserve_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ComplianceStatus");

                    b.Property<string>("EnforcingAuthority");

                    b.Property<int>("ReserveID")
                        .HasMaxLength(100);

                    b.Property<string>("ReserveType");

                    b.Property<int?>("RestrictionId");

                    b.HasKey("Id");

                    b.HasIndex("RestrictionId");

                    b.ToTable("Reserve");
                });

            modelBuilder.Entity("LIMSCore.Entities.Responsbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "responsibility_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("PerformanceRequirement");

                    b.Property<int?>("RRRId");

                    b.Property<int>("ReponsibilityID")
                        .HasMaxLength(100);

                    b.Property<string>("ResponsibilityType");

                    b.HasKey("Id");

                    b.HasAlternateKey("ReponsibilityID");

                    b.HasIndex("RRRId");

                    b.ToTable("Responsibility");
                });

            modelBuilder.Entity("LIMSCore.Entities.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "restriction_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ChargeID");

                    b.Property<string>("Extent");

                    b.Property<int?>("RRRsId");

                    b.Property<int>("RestrictionID")
                        .HasMaxLength(100);

                    b.Property<string>("RestrictionType");

                    b.Property<int>("StatutoryRestrictionID");

                    b.HasKey("Id");

                    b.HasIndex("RRRsId");

                    b.ToTable("Restriction");
                });

            modelBuilder.Entity("LIMSCore.Entities.Right", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "right_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int?>("RRRId");

                    b.Property<int>("RightID")
                        .HasMaxLength(100);

                    b.Property<string>("RightType");

                    b.HasKey("Id");

                    b.HasIndex("RRRId");

                    b.ToTable("Right");
                });

            modelBuilder.Entity("LIMSCore.Entities.RRR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "rrr_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("Expires");

                    b.Property<int>("OwnerID");

                    b.Property<int>("ParcelID");

                    b.Property<string>("RRRType");

                    b.Property<int>("RRR_ID")
                        .HasMaxLength(100);

                    b.Property<double>("Share");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasAlternateKey("RRR_ID");

                    b.HasIndex("ParcelID");

                    b.ToTable("RRR");
                });

            modelBuilder.Entity("LIMSCore.Entities.Spatial_Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "spatial_unit_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<double?>("Area");

                    b.Property<int>("BoundaryID");

                    b.Property<string>("Label");

                    b.Property<string>("Layer");

                    b.Property<double?>("Length");

                    b.Property<int?>("MapIndexId");

                    b.Property<int>("MapSheetNo");

                    b.Property<int>("PreliminaryUnitID");

                    b.Property<string>("ReferencePoint");

                    b.Property<int>("SpatialUnitID")
                        .HasMaxLength(100);

                    b.Property<int>("SpatialUnitSetID");

                    b.Property<string>("SpatialUnitType")
                        .HasMaxLength(30);

                    b.Property<int>("SurveyID");

                    b.Property<double?>("Volume");

                    b.HasKey("Id");

                    b.HasAlternateKey("SpatialUnitID");

                    b.HasIndex("BoundaryID")
                        .IsUnique();

                    b.HasIndex("MapIndexId");

                    b.HasIndex("SpatialUnitSetID");

                    b.HasIndex("SurveyID");

                    b.ToTable("SpatialUnit");
                });

            modelBuilder.Entity("LIMSCore.Entities.SpatialUnitSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "spatialunitset_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("Label");

                    b.Property<int>("SpatialUnitID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("SpatialUnitID");

                    b.ToTable("SpatialUnitSet");
                });

            modelBuilder.Entity("LIMSCore.Entities.SpatialUnitSetRegistraion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RegistrationID");

                    b.Property<int>("SpatialUnitID");

                    b.Property<int?>("spatialUnitSetId");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationID");

                    b.HasIndex("spatialUnitSetId");

                    b.ToTable("SpatialUnitSetRegistraion");
                });

            modelBuilder.Entity("LIMSCore.Entities.StatutoryRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "statutory_restriction_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("NatureOfRestriction");

                    b.Property<string>("RestrictingAuthority");

                    b.Property<int?>("RestrictionId");

                    b.Property<int>("StatutoryRestrictionID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("RestrictionId");

                    b.ToTable("StaturtoryRestriction");
                });

            modelBuilder.Entity("LIMSCore.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "survey_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("CompsNo");

                    b.Property<DateTime?>("DateOfEntry");

                    b.Property<int>("PDPRefNo");

                    b.Property<int>("ParcelID");

                    b.Property<string>("PlansNo");

                    b.Property<int>("SurveyID")
                        .HasMaxLength(100);

                    b.Property<string>("SurveyorsName");

                    b.Property<string>("TypeOfSurvey");

                    b.HasKey("Id");

                    b.HasAlternateKey("SurveyID");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("LIMSCore.Entities.Tenure", b =>
                {
                    b.Property<int>("TenureID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasAnnotation("SqlServer:HiLoSequenceName", "tenure_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ParcelID");

                    b.Property<string>("TenureType");

                    b.HasKey("TenureID");

                    b.ToTable("Tenure");
                });

            modelBuilder.Entity("LIMSCore.Entities.Valuation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "valuation_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ParcelID")
                        .HasMaxLength(100);

                    b.Property<string>("SerialNo");

                    b.Property<string>("ValuationBookNo");

                    b.Property<int>("ValuationClassID");

                    b.Property<DateTime?>("ValuationDate");

                    b.Property<double?>("Value");

                    b.Property<string>("Valuer");

                    b.HasKey("Id");

                    b.HasIndex("ParcelID");

                    b.ToTable("Valution");
                });

            modelBuilder.Entity("LIMSCore.Entities.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "zone_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("RegulatedID");

                    b.Property<int>("ZoneType");

                    b.Property<int>("ZoningID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("ZoningID");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("LIMSCore.Entities.Administration", b =>
                {
                    b.HasOne("LIMSCore.Entities.Parcel", "Parcel")
                        .WithOne("AdministrativeClass")
                        .HasForeignKey("LIMSCore.Entities.Administration", "ParcelId");
                });

            modelBuilder.Entity("LIMSCore.Entities.BoundaryBeacon", b =>
                {
                    b.HasOne("LIMSCore.Entities.Beacon", "Beacon")
                        .WithMany("BoundaryBeacons")
                        .HasForeignKey("BeaconID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Boundary", "Boundary")
                        .WithMany("BoundaryBeacons")
                        .HasForeignKey("BoundaryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Building", b =>
                {
                    b.HasOne("LIMSCore.Entities.Spatial_Unit", "Spatial_Unit")
                        .WithMany("Buildings")
                        .HasForeignKey("SpatialUnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Apartment", "ApartmentClass")
                        .WithMany("Buildings")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Charge", b =>
                {
                    b.HasOne("LIMSCore.Entities.Restriction", "Restriction")
                        .WithMany("Charges")
                        .HasForeignKey("RestrictionId");
                });

            modelBuilder.Entity("LIMSCore.Entities.Freehold", b =>
                {
                    b.HasOne("LIMSCore.Entities.Tenure", "TenureClass")
                        .WithOne("Freehold")
                        .HasForeignKey("LIMSCore.Entities.Freehold", "TenureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Group", b =>
                {
                    b.HasOne("LIMSCore.Entities.Owner", "Owner")
                        .WithMany("Groups")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupGroupLeadership", b =>
                {
                    b.HasOne("LIMSCore.Entities.Group", "Group")
                        .WithMany("GroupGroupLeaderships")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.GroupLeadership", "GroupLeadership")
                        .WithMany("GroupGroupLeadership")
                        .HasForeignKey("GroupLeadershipId");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupGroupMembership", b =>
                {
                    b.HasOne("LIMSCore.Entities.Group", "Group")
                        .WithMany("GroupGroupMemberships")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.GroupMembership", "GroupMembership")
                        .WithMany("GroupGroupMemberships")
                        .HasForeignKey("GroupMembershipId");
                });

            modelBuilder.Entity("LIMSCore.Entities.GroupLeadershipPerson", b =>
                {
                    b.HasOne("LIMSCore.Entities.GroupLeadership", "GroupLeadership")
                        .WithMany("GroupLeadershipPersons")
                        .HasForeignKey("GroupLeadershipId");

                    b.HasOne("LIMSCore.Entities.Person", "Person")
                        .WithMany("GroupLeadershipPersons")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Institution", b =>
                {
                    b.HasOne("LIMSCore.Entities.Owner", "Owner")
                        .WithMany("Insitutions")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("LIMSCore.Entities.InstitutionInstitutionLeadership", b =>
                {
                    b.HasOne("LIMSCore.Entities.Institution", "Institution")
                        .WithMany("InstitutionInstitutionLeaderships")
                        .HasForeignKey("InstitutionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.InstitutionLeadership", "InstitutionLeadership")
                        .WithMany("InstitutionInstitutionLeaderships")
                        .HasForeignKey("InstitutionLeadershipId");
                });

            modelBuilder.Entity("LIMSCore.Entities.InstitutionLeadershipPerson", b =>
                {
                    b.HasOne("LIMSCore.Entities.InstitutionLeadership", "InstitutionLeadership")
                        .WithMany("InstitutionLeadershipPersons")
                        .HasForeignKey("InstitutionLeadershipId");

                    b.HasOne("LIMSCore.Entities.Person", "Person")
                        .WithMany("InstitutionLeadershipPersons")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.LandUse", b =>
                {
                    b.HasOne("LIMSCore.Entities.BuildingRegulations", "BuildingRegulations")
                        .WithMany("LandUses")
                        .HasForeignKey("RegulatedID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Zone", "ZoneClass")
                        .WithMany("LandUses")
                        .HasForeignKey("ZoningID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Leasehold", b =>
                {
                    b.HasOne("LIMSCore.Entities.Tenure", "TenureClass")
                        .WithOne("Leasehold")
                        .HasForeignKey("LIMSCore.Entities.Leasehold", "TenureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Mortgage", b =>
                {
                    b.HasOne("LIMSCore.Entities.Restriction", "Restriction")
                        .WithMany("Mortgages")
                        .HasForeignKey("RestrictionId");
                });

            modelBuilder.Entity("LIMSCore.Entities.OwnerRRR", b =>
                {
                    b.HasOne("LIMSCore.Entities.Owner", "Owner")
                        .WithMany("OwnerRRRs")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.RRR", "RRR")
                        .WithMany("OwnerRRRs")
                        .HasForeignKey("RRRID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Parcel", b =>
                {
                    b.HasOne("LIMSCore.Entities.LandUse", "LandUse")
                        .WithMany("Parcels")
                        .HasForeignKey("LandUseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Registration", "RegistrationClass")
                        .WithMany("Parcels")
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Spatial_Unit", "Spatial_Unit")
                        .WithMany("Parcels")
                        .HasForeignKey("SpatialUnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Tenure", "TenureClass")
                        .WithMany("Parcels")
                        .HasForeignKey("TenureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Person", b =>
                {
                    b.HasOne("LIMSCore.Entities.Owner", "Owner")
                        .WithMany("Persons")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("LIMSCore.Entities.PersonGroupMembership", b =>
                {
                    b.HasOne("LIMSCore.Entities.GroupMembership", "GroupMembership")
                        .WithMany("PersonGroupMemberships")
                        .HasForeignKey("GroupMembershipId");

                    b.HasOne("LIMSCore.Entities.Person", "Person")
                        .WithMany("PersonGroupMemberships")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Reserve", b =>
                {
                    b.HasOne("LIMSCore.Entities.Restriction", "Restriction")
                        .WithMany("Reserves")
                        .HasForeignKey("RestrictionId");
                });

            modelBuilder.Entity("LIMSCore.Entities.Responsbility", b =>
                {
                    b.HasOne("LIMSCore.Entities.RRR", "RRR")
                        .WithMany("Responisbilities")
                        .HasForeignKey("RRRId");
                });

            modelBuilder.Entity("LIMSCore.Entities.Restriction", b =>
                {
                    b.HasOne("LIMSCore.Entities.RRR", "RRRs")
                        .WithMany("Restrictions")
                        .HasForeignKey("RRRsId");
                });

            modelBuilder.Entity("LIMSCore.Entities.Right", b =>
                {
                    b.HasOne("LIMSCore.Entities.RRR", "RRR")
                        .WithMany("Rights")
                        .HasForeignKey("RRRId");
                });

            modelBuilder.Entity("LIMSCore.Entities.RRR", b =>
                {
                    b.HasOne("LIMSCore.Entities.Parcel", "Parcel")
                        .WithMany("RRRs")
                        .HasForeignKey("ParcelID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.Spatial_Unit", b =>
                {
                    b.HasOne("LIMSCore.Entities.Boundary", "Boundary")
                        .WithOne("Spatial_Unit")
                        .HasForeignKey("LIMSCore.Entities.Spatial_Unit", "BoundaryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.MapIndex", "MapIndex")
                        .WithMany("Spatial_Units")
                        .HasForeignKey("MapIndexId");

                    b.HasOne("LIMSCore.Entities.SpatialUnitSet", "SpatialUnitSet")
                        .WithMany("Spatial_Units")
                        .HasForeignKey("SpatialUnitSetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.Survey", "Survey")
                        .WithMany("Spatial_Units")
                        .HasForeignKey("SurveyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LIMSCore.Entities.SpatialUnitSetRegistraion", b =>
                {
                    b.HasOne("LIMSCore.Entities.Registration", "Registration")
                        .WithMany("SpatialUnitSetRegistraion")
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LIMSCore.Entities.SpatialUnitSet", "spatialUnitSet")
                        .WithMany("SpatialUnitSetRegistraion")
                        .HasForeignKey("spatialUnitSetId");
                });

            modelBuilder.Entity("LIMSCore.Entities.StatutoryRestriction", b =>
                {
                    b.HasOne("LIMSCore.Entities.Restriction", "Restriction")
                        .WithMany("StatutoryRestrictions")
                        .HasForeignKey("RestrictionId");
                });

            modelBuilder.Entity("LIMSCore.Entities.Valuation", b =>
                {
                    b.HasOne("LIMSCore.Entities.Parcel", "Parcel")
                        .WithMany("ValuationClasses")
                        .HasForeignKey("ParcelID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
